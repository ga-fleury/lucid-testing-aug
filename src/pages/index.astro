---
// Lucid Framework - Admin Interface
// Enhanced with middleware authentication context

// Get authentication data from middleware
const { user, isAuthenticated } = Astro.locals;

// Enhanced server-side logging for page render debugging
const pageRenderTime = new Date().toISOString();
const pageRenderMs = Date.now();

console.info('üè† INDEX PAGE RENDER DEBUG:', { 
    timestamp: pageRenderTime,
    timestampMs: pageRenderMs,
    authenticated: isAuthenticated,
    userEmail: user?.userEmail || 'anonymous',
    middlewareActive: user !== undefined,
    hasUser: !!user,
    userType: typeof user,
    userIsNull: user === null,
    userIsUndefined: user === undefined,
    localsKeys: Object.keys(Astro.locals),
    localsUser: !!Astro.locals.user,
    localsAuth: Astro.locals.isAuthenticated
});

// Log the actual values that will be displayed
console.info('üé® PAGE DISPLAY VALUES:', {
    willShowAuthenticatedMessage: !!user,
    willShowNotAuthenticatedMessage: !isAuthenticated,
    displayLogic: {
        userExists: !!user,
        isAuthenticated: isAuthenticated,
        shouldShowGreenBox: !!user,
        shouldShowYellowBox: !isAuthenticated
    }
});

// Debug: Check if middleware provided the expected data
if (user === undefined) {
    console.warn('‚ö†Ô∏è Middleware did not provide user data - middleware may have failed');
}

// Debug: Log cookie information for debugging
const cookieHeader = Astro.request.headers.get('cookie');
console.info('Request cookies for debugging:', {
    hasCookieHeader: !!cookieHeader,
    cookieLength: cookieHeader?.length || 0,
    hasSessionCookie: cookieHeader?.includes('webflow_session_data') || false
});

// Set cache control headers to prevent caching of authenticated state
Astro.response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate');
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lucid Framework - Admin</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .admin-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #1f2937;
            margin-bottom: 1rem;
        }
        .status {
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        .status.loading {
            background: #f3f4f6;
            color: #6b7280;
        }
        .status.error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
        .status.success {
            background: #f0fdf4;
            color: #166534;
            border: 1px solid #bbf7d0;
        }
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin: 0.5rem 0.5rem 0.5rem 0;
        }
        .btn-primary {
            background: #3b82f6;
            color: white;
        }
        .btn-primary:hover {
            background: #2563eb;
        }
        pre {
            background: #f9fafb;
            padding: 1rem;
            border-radius: 6px;
            overflow-x: auto;
            font-size: 0.875rem;
        }
    </style>
</head>
<body>
    <div class="admin-container">
        <h1>üöÄ Lucid Framework Admin</h1>
        
        <div id="status" class="status loading">
            Loading framework status...
        </div>

        {user && (
            <div class="status success" style="margin-top: 1rem;">
                üõ°Ô∏è <strong>Middleware Active:</strong> Authenticated as {user.userEmail}
                {user.siteId && ` ‚Ä¢ Site: ${user.siteId}`}
            </div>
        )}

        {!isAuthenticated && (
            <div class="status" style="background: #fef3c7; color: #92400e; margin-top: 1rem;">
                üîì <strong>Public Access:</strong> Not authenticated (middleware enhancement active)
            </div>
        )}

        <div id="actions" style="display: none;">
            <button class="btn btn-primary" onclick="authenticate()">
                üîê Authenticate with Webflow
            </button>
            
            <button class="btn btn-primary" onclick="checkStatus()" style="background: #10b981;">
                üìä Check Status
            </button>
            
            <button class="btn btn-primary" onclick="debugSession()" style="background: #f59e0b;">
                üêõ Debug Session
            </button>
            
            <button class="btn btn-primary" onclick="testMiddleware()" style="background: #8b5cf6;">
                üõ°Ô∏è Test Middleware
            </button>
            
            <button class="btn btn-primary" onclick="debugConsistency()" style="background: #ec4899;">
                üîç Debug Consistency
            </button>
            
            <button class="btn btn-primary" onclick="debugPageVsApi()" style="background: #84cc16;">
                üìä Page vs API Debug
            </button>
        </div>

        <div id="results">
            <!-- Results will be displayed here -->
        </div>
    </div>

    <script>
        let clientIsAuthenticated = false;

        // Check authentication status on page load
        window.addEventListener('DOMContentLoaded', () => {
            console.log('DOM loaded, functions available:', {
                authenticate: typeof authenticate,
                checkStatus: typeof checkStatus
            });
            
            // Immediately check if there's a mismatch between server and client state
            checkAuthenticationState();
            checkStatus();
            document.getElementById('actions').style.display = 'block';
        });

        // Quick authentication state verification
        window.checkAuthenticationState = async function() {
            try {
                // Quick status check to verify current auth state
                const response = await fetch('/lucid/api/admin/status');
                if (response.ok) {
                    const data = await response.json();
                    const serverIsAuthenticated = data.session.authenticated;
                    
                    // Get current page display state
                    const notAuthBanner = document.querySelector('.status[style*="background: #fef3c7"]');
                    const authBanner = document.querySelector('.status.success');
                    
                    // If server says authenticated but page shows not authenticated banner
                    if (serverIsAuthenticated && notAuthBanner && notAuthBanner.style.display !== 'none') {
                        console.warn('üîÑ Authentication state mismatch detected - server authenticated but page shows not authenticated');
                        console.log('Refreshing page to fix caching issue...');
                        // Force refresh to get correct server state
                        window.location.reload(true);
                    }
                    
                    // If server says not authenticated but page shows authenticated banner
                    if (!serverIsAuthenticated && authBanner && authBanner.style.display !== 'none') {
                        console.warn('üîÑ Authentication state mismatch detected - server not authenticated but page shows authenticated');
                        console.log('Refreshing page to fix caching issue...');
                        window.location.reload(true);
                    }
                }
            } catch (error) {
                console.log('Quick auth check failed:', error.message);
            }
        };

        window.authenticate = function() {
            console.log('Authentication function called - redirecting to auth endpoint');
            // Direct redirect to OAuth endpoint (no fetch needed)
            window.location.href = '/lucid/auth';
        }

        window.checkStatus = async function() {
            const statusEl = document.getElementById('status');
            const resultsEl = document.getElementById('results');
            
            statusEl.className = 'status loading';
            statusEl.textContent = 'Checking status...';
            
            try {
                console.log('Testing simple endpoint first...');
                
                // Test the minimal endpoint first
                const testResponse = await fetch('/lucid/api/test');
                console.log('Test response status:', testResponse.status);
                console.log('Test response ok:', testResponse.ok);
                
                if (!testResponse.ok) {
                    throw new Error(`Test endpoint failed: ${testResponse.status}`);
                }
                
                const testData = await testResponse.json();
                console.log('Test endpoint data:', testData);
                
                // Test the locals parameter endpoint
                console.log('Testing locals parameter endpoint...');
                const localsResponse = await fetch('/lucid/api/test-locals');
                console.log('Locals response status:', localsResponse.status);
                console.log('Locals response ok:', localsResponse.ok);
                
                let localsData = null;
                if (localsResponse.ok) {
                    localsData = await localsResponse.json();
                    console.log('Locals endpoint data:', localsData);
                } else {
                    console.error('Locals endpoint failed');
                }
                
                // Test the context parameter endpoint
                console.log('Testing context parameter endpoint...');
                const contextResponse = await fetch('/lucid/api/test-context');
                console.log('Context response status:', contextResponse.status);
                console.log('Context response ok:', contextResponse.ok);
                
                let contextData = null;
                if (contextResponse.ok) {
                    contextData = await contextResponse.json();
                    console.log('Context endpoint data:', contextData);
                } else {
                    console.error('Context endpoint failed');
                }
                
                // Now try the ORIGINAL status endpoint (should work now)
                console.log('Testing ORIGINAL status endpoint...');
                const response = await fetch('/lucid/api/admin/status');
                console.log('Status response status:', response.status);
                console.log('Status response ok:', response.ok);
                
                if (!response.ok) {
                    throw new Error(`Status endpoint failed: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('Status endpoint data:', data);
                
                if (response.ok) {
                    statusEl.className = 'status success';
                    statusEl.textContent = `System: ${data.system.status} | Authenticated: ${data.session.authenticated}`;
                    
                    resultsEl.innerHTML = '<h3>System Status (FIXED!)</h3><pre>' + 
                        JSON.stringify(data, null, 2) + '</pre>';
                        
                    if (data.session.authenticated) {
                        clientIsAuthenticated = true;
                        showFrameworkActions();
                    }
                } else {
                    throw new Error(data.error || 'Status check failed');
                }
            } catch (error) {
                showError('Status check failed: ' + error.message);
            }
        }

        window.showFrameworkActions = function() {
            const actionsEl = document.getElementById('actions');
            actionsEl.innerHTML += `
                <hr style="margin: 1rem 0;">
                <h3>Framework Actions</h3>
                <button class="btn btn-primary" onclick="installFramework()" style="background: #10b981;">
                    ‚ö° Install Framework
                </button>
                <button class="btn btn-primary" onclick="uninstallFramework()" style="background: #ef4444;">
                    üóëÔ∏è Uninstall Framework
                </button>
            `;
        }

        window.installFramework = async function() {
            if (!clientIsAuthenticated) {
                showError('Please authenticate first');
                return;
            }
            
            try {
                const response = await fetch('/lucid/api/admin/framework', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action: 'install',
                        config: {
                            debug: true,
                            theme: 'default'
                        }
                    })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess('Framework installed successfully!');
                    document.getElementById('results').innerHTML += 
                        '<h3>Installation Result</h3><pre>' + 
                        JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    throw new Error(data.error || 'Installation failed');
                }
            } catch (error) {
                showError('Installation error: ' + error.message);
            }
        }

        window.uninstallFramework = async function() {
            if (!clientIsAuthenticated) {
                showError('Please authenticate first');
                return;
            }
            
            if (!confirm('Are you sure you want to uninstall the framework?')) {
                return;
            }
            
            try {
                const response = await fetch('/lucid/api/admin/framework', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ action: 'uninstall' })
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    showSuccess('Framework uninstalled successfully!');
                    document.getElementById('results').innerHTML += 
                        '<h3>Uninstallation Result</h3><pre>' + 
                        JSON.stringify(data, null, 2) + '</pre>';
                } else {
                    throw new Error(data.error || 'Uninstallation failed');
                }
            } catch (error) {
                showError('Uninstallation error: ' + error.message);
            }
        }

        window.showError = function(message) {
            const statusEl = document.getElementById('status');
            statusEl.className = 'status error';
            statusEl.textContent = '‚ùå ' + message;
        }

        window.showSuccess = function(message) {
            const statusEl = document.getElementById('status');
            statusEl.className = 'status success';
            statusEl.textContent = '‚úÖ ' + message;
        }

        window.debugSession = async function() {
            try {
                console.log('Debug session function called');
                const response = await fetch('/lucid/api/debug-session');
                const data = await response.json();
                
                console.log('Session debug data:', data);
                
                const resultsEl = document.getElementById('results');
                resultsEl.innerHTML = '<h3>Session Debug Info</h3><pre>' + 
                    JSON.stringify(data, null, 2) + '</pre>';
                    
                if (data.sessionValidation.isValid) {
                    showSuccess('Session is valid!');
                } else {
                    showError('Session is not valid or not found');
                }
            } catch (error) {
                console.error('Debug session error:', error);
                showError('Debug session error: ' + error.message);
            }
        }

        window.testMiddleware = async function() {
            try {
                console.log('Testing middleware protection...');
                const response = await fetch('/lucid/api/admin/middleware-test');
                const data = await response.json();
                
                console.log('Middleware test results:', data);
                
                const resultsEl = document.getElementById('results');
                resultsEl.innerHTML = '<h3>Middleware Test Results</h3><pre>' + 
                    JSON.stringify(data, null, 2) + '</pre>';
                
                if (response.ok && data.middlewareTest?.passed) {
                    showSuccess('Middleware protection working correctly!');
                } else if (response.status === 401) {
                    showError('Middleware correctly blocked unauthenticated access');
                } else {
                    showError('Middleware test failed: ' + (data.error || 'Unknown error'));
                }
            } catch (error) {
                console.error('Middleware test error:', error);
                showError('Middleware test error: ' + error.message);
            }
        }

        window.debugConsistency = async function() {
            try {
                console.log('üîç Running middleware consistency debug...');
                const response = await fetch('/lucid/api/debug-middleware-consistency');
                const data = await response.json();
                
                console.log('Consistency debug results:', data);
                
                const resultsEl = document.getElementById('results');
                
                // Highlight inconsistencies
                let statusMessage = '';
                let statusClass = '';
                
                if (data.consistency.isConsistent) {
                    if (data.consistency.bothAuthenticated) {
                        statusMessage = '‚úÖ CONSISTENT: Both middleware and direct validation show AUTHENTICATED';
                        statusClass = 'success';
                    } else {
                        statusMessage = '‚úÖ CONSISTENT: Both middleware and direct validation show NOT AUTHENTICATED';
                        statusClass = 'success';
                    }
                } else {
                    statusMessage = '‚ö†Ô∏è INCONSISTENCY DETECTED: ' + data.consistency.inconsistencyType;
                    statusClass = 'error';
                }
                
                resultsEl.innerHTML = `
                    <h3>üîç Middleware Consistency Debug</h3>
                    <div class="status ${statusClass}" style="margin: 1rem 0;">
                        ${statusMessage}
                    </div>
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                `;
                
                if (data.consistency.isConsistent) {
                    showSuccess('Authentication state is consistent');
                } else {
                    showError('Inconsistency detected: ' + data.consistency.inconsistencyType);
                }
                
            } catch (error) {
                console.error('‚ùå Consistency debug error:', error);
                showError('Consistency debug error: ' + error.message);
            }
        }

        window.debugPageVsApi = async function() {
            try {
                console.log('üìä Running page vs API debug...');
                const response = await fetch('/lucid/api/debug-page-vs-api');
                const data = await response.json();
                
                console.log('Page vs API debug results:', data);
                
                const resultsEl = document.getElementById('results');
                
                // Analyze cookie situation
                let cookieAnalysis = '';
                if (data.cookies.foundSessionCookies && Object.keys(data.cookies.foundSessionCookies).length > 0) {
                    cookieAnalysis = `‚úÖ Found session cookies: ${Object.keys(data.cookies.foundSessionCookies).join(', ')}`;
                } else {
                    cookieAnalysis = `‚ö†Ô∏è No session cookies found! Total cookies: ${data.cookies.totalCookieCount}`;
                }
                
                resultsEl.innerHTML = `
                    <h3>üìä Page vs API Authentication Debug</h3>
                    <div class="status info" style="margin: 1rem 0;">
                        Current API Call: ${data.currentApiCall.middleware.isAuthenticated ? '‚úÖ Authenticated' : '‚ùå Not Authenticated'}
                    </div>
                    <div class="status info" style="margin: 1rem 0;">
                        ${cookieAnalysis}
                    </div>
                    <pre>${JSON.stringify(data, null, 2)}</pre>
                `;
                
                showSuccess('Page vs API debug completed - check results above');
                
            } catch (error) {
                console.error('‚ùå Page vs API debug error:', error);
                showError('Page vs API debug error: ' + error.message);
            }
        }
    </script>
</body>
</html>
